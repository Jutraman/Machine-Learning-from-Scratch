%import DrawDecisionTree.*
%% ??ID3???????????
clear ;

%% ?????
disp('?????????...');
[matrix,attributes_label,attributes] =  id3_preprocess();

%% ??ID3??????id3()??????
disp('???????????????...');
tree = id3(matrix,attributes_label,attributes);

%% ???????
[nodeids,nodevalues] = print_tree(tree);
tree_plot(nodeids,nodevalues);

disp('ID3??????????');


function nurserynumric2 = importfile1(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as a matrix.
%   NURSERYNUMRIC2 = IMPORTFILE1(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   NURSERYNUMRIC2 = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   nurserynumric2 = importfile1('nursery_numric2.txt', 1, 12960);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2020/12/01 11:22:13

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;

            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
nurserynumric2 = table;
nurserynumric2.parents = cell2mat(raw(:, 1));
nurserynumric2.has_nurs = cell2mat(raw(:, 2));
nurserynumric2.form = cell2mat(raw(:, 3));
nurserynumric2.children = cell2mat(raw(:, 4));
nurserynumric2.housing = cell2mat(raw(:, 5));
nurserynumric2.finance = cell2mat(raw(:, 6));
nurserynumric2.social = cell2mat(raw(:, 7));
nurserynumric2.health = cell2mat(raw(:, 8));
nurserynumric2.class = cell2mat(raw(:, 9));
end

function [ matrix,attributes,activeAttributes ] = id3_preprocess(  )
%% ID3???????????????0,1??

% ?????
% matrix? ????0,1???
% attributes: ???Label?
% activeAttributes : ??????1?

%% ????
txt = {  '??'    '??'    '????'    '?????'    '??'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'
        ''        '?'      '?'          '?'            '?'  }
attributes=txt(1,2:end);
activeAttributes = ones(1,length(attributes)-1);
data = txt(2:end,2:end);

%% ??????????
[rows,cols] = size(data);
matrix = zeros(rows,cols);
for j=1:cols
    matrix(:,j) = cellfun(@trans2onezero,data(:,j));
end

end

function flag = trans2onezero(data)
    if strcmp(data,'?') ||strcmp(data,'?')...
        ||strcmp(data,'?')
        flag =0;
        return ;
    end
    flag =1;
end

function [trainSet,testSet,attrNames,acAttr,data]=importData()
load nursery.mat nursery
attrNames=nursery(1,2:end);
acAttr=ones(1,length(attrNames)-1);
data=nursery(2:end,2:end);
%train set
trainSet=data(2:9000,:);
%test set
testSet=data(9001:12961,:);
end

function tree=DecisionTree(data)
minSample=20;
if length(data)<=minSample
    tree=node("",{},mean(data(:,end)),nan,nan);
else
    [bestAttr,bestThre]=chooseAttr(data);
    [lData,rData]=splitData(data,bestAttr,bestThre);
end
end

function [ tree ] = id3( examples, attributes, activeAttributes )

if (isempty(examples))
    error('Empty Set');
end


numberAttributes = length(activeAttributes);
numberExamples = length(examples(:,1));
%numberExamples = height(examples(:,1));

tree = struct('value', 'null', 'left', 'null', 'right', 'null');

%disp(examples(1:5, numberAttributes + 1))
lastColumnSum = sum(examples(:, numberAttributes + 1));

if (lastColumnSum == numberExamples)
    tree.value = 'true';
    return
end

if (lastColumnSum == 0)
    tree.value = 'false';
    return
end

if (sum(activeAttributes) == 0)
    if (lastColumnSum >= numberExamples / 2)
        tree.value = 'true';
    else
        tree.value = 'false';
    end
    return
end

p1 = lastColumnSum / numberExamples;
if (p1 == 0)
    p1_eq = 0;
else
    p1_eq = -1*p1*log2(p1);
end
p0 = (numberExamples - lastColumnSum) / numberExamples;
if (p0 == 0)
    p0_eq = 0;
else
    p0_eq = -1*p0*log2(p0);
end
currentEntropy = p1_eq + p0_eq;

gains = -1*ones(1,numberAttributes);

for i=1:numberAttributes
    if (activeAttributes(i))
        s0 = 0; s0_and_true = 0;
        s1 = 0; s1_and_true = 0;
        for j=1:numberExamples
            if (examples(j,i))
                s1 = s1 + 1;
                if (examples(j, numberAttributes + 1))
                    s1_and_true = s1_and_true + 1;
                end
            else
                s0 = s0 + 1;
                if (examples(j, numberAttributes + 1))
                    s0_and_true = s0_and_true + 1;
                end
            end
        end


        if (~s1)
            p1 = 0;
        else
            p1 = (s1_and_true / s1);
        end
        if (p1 == 0)
            p1_eq = 0;
        else
            p1_eq = -1*(p1)*log2(p1);
        end
        if (~s1)
            p0 = 0;
        else
            p0 = ((s1 - s1_and_true) / s1);
        end
        if (p0 == 0)
            p0_eq = 0;
        else
            p0_eq = -1*(p0)*log2(p0);
        end
        entropy_s1 = p1_eq + p0_eq;


        if (~s0)
            p1 = 0;
        else
            p1 = (s0_and_true / s0);
        end
        if (p1 == 0)
            p1_eq = 0;
        else
            p1_eq = -1*(p1)*log2(p1);
        end
        if (~s0)
            p0 = 0;
        else
            p0 = ((s0 - s0_and_true) / s0);
        end
        if (p0 == 0)
            p0_eq = 0;
        else
            p0_eq = -1*(p0)*log2(p0);
        end
        entropy_s0 = p1_eq + p0_eq;

        gains(i) = currentEntropy - ((s1/numberExamples)*entropy_s1) - ((s0/numberExamples)*entropy_s0);
    end
end


[~, bestAttribute] = max(gains);
tree.value = attributes{bestAttribute};
disp(bestAttribute);
activeAttributes(bestAttribute) = 0;

examples_0= examples(examples(:,bestAttribute)==0,:);
examples_1= examples(examples(:,bestAttribute)==1,:);

if (isempty(examples_0))
    leaf = struct('value', 'null', 'left', 'null', 'right', 'null');
    if (lastColumnSum >= numberExamples / 2) % for matrix examples
        leaf.value = 'true';
    else
        leaf.value = 'false';
    end
    tree.left = leaf;
else
    % ??
    tree.left = id3(examples_0, attributes, activeAttributes);
end
% ? value = true or 1, ???
if (isempty(examples_1))
    leaf = struct('value', 'null', 'left', 'null', 'right', 'null');
    if (lastColumnSum >= numberExamples / 2)
        leaf.value = 'true';
    else
        leaf.value = 'false';
    end
    tree.right = leaf;
else
    % ??
    tree.right = id3(examples_1, attributes, activeAttributes);
end

% ??
return
end

function [nodeids_,nodevalue_] = print_tree(tree)
global nodeid nodeids nodevalue;
nodeids(1)=0;
nodeid=0;
nodevalue={};
if isempty(tree)
    disp('Empty Tree');
    return ;
end

queue = queue_push([],tree);
while ~isempty(queue)
     [node,queue] = queue_pop(queue);

     visit(node,queue_curr_size(queue));
     if ~strcmp(node.left,'null')
        queue = queue_push(queue,node.left);
     end
     if ~strcmp(node.right,'null')
        queue = queue_push(queue,node.right);
     end
end

nodeids_=nodeids;
nodevalue_=nodevalue;
end

function visit(node,length_)
    global nodeid nodeids nodevalue;
    if isleaf(node)
        nodeid=nodeid+1;
        fprintf('leaves node: %d\t, attribute: %s\n', ...
        nodeid, node.value);
        nodevalue{1,nodeid}=node.value;
    else
        nodeid=nodeid+1;
        nodeids(nodeid+length_+1)=nodeid;
        nodeids(nodeid+length_+2)=nodeid;

        fprintf('node: %d\t, attribute: %s\n, left nodes: node%d, right nodes: node%d\n', ...
        nodeid, node.value,nodeid+length_+1,nodeid+length_+2);
        nodevalue{1,nodeid}=node.value;
    end
end

function flag = isleaf(node)
    if strcmp(node.left,'null') && strcmp(node.right,'null')
        flag =1;
    else
        flag=0;
    end
end

function [ newqueue ] = queue_push( queue,item )
newqueue=[queue,item];

end

function [ item,newqueue ] = queue_pop(queue)

if isempty(queue)
    disp('Empty queue');
    return;
end

item = queue(1);
newqueue=queue(2:end);

end

function [ length_ ] = queue_curr_size( queue )

length_= length(queue);

end

function tree_plot( p ,nodevalues)
%% ??treeplot??

[x,y,h]=treelayout(p);
f = find(p~=0);
pp = p(f);
X = [x(f); x(pp); NaN(size(f))];
Y = [y(f); y(pp); NaN(size(f))];

X = X(:);
Y = Y(:);

    n = length(p);
    if n < 500
        hold on ;
        plot (x, y, 'ro', X, Y, 'r-');
        nodesize = length(x);
        for i=1:nodesize
%            text(x(i)+0.01,y(i),['node' num2str(i)]);
            text(x(i)+0.01,y(i),nodevalues{1,i});
        end
        hold off;
    else
        plot (X, Y, 'r-');
    end

xlabel(['height = ' int2str(h)]);
axis([0 1 0 1]);

end
